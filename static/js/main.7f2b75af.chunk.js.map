{"version":3,"sources":["logo.svg","TodoHeader.js","TodoSection.js","TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoHeader","_ref","todos","addTodo","change","input","keyPress","react_default","a","createElement","className","for","class","onChange","onKeyPress","value","type","id","placeholder","onClick","src","alt","TodoList","_ref2","toggleTask","deleteTask","map","todo","TodoSection_TodoItem","completeFlag","todoId","content","key","TodoItem","_ref3","join","data-selected","TodoSection","TodoSection_TodoList","TodoFooter","App","state","lastTodoId","_this$state","_this","setState","concat","e","target","keyEvent","event","selected","dataset","todoList","Number","Object","objectSpread","filter","_this$state2","this","src_TodoHeader","src_TodoSection","src_TodoFooter","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f2b75af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nconst TodoHeader = ({todos, addTodo, change, input, keyPress}) => {\n    return (\n        <div className=\"todo_header\">\n            <label for=\"inp\" class=\"inp\">\n                <input onChange={change} onKeyPress={keyPress} value={input}  type=\"text\" id=\"inp\" placeholder=\"&nbsp;\"/>\n                <span class=\"label\">Write Todo</span>\n                <span class=\"border\"></span>\n            </label>\n            <span className=\"add_span\" onClick={addTodo}><img src=\"/img/add.png\" alt=\"addTodo\"/></span>\n        </div>\n    );\n}\n\nexport default TodoHeader;","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nconst TodoSection = ({todos, toggleTask, deleteTask}) => {\n    return (\n        <ul className=\"todo_section\">\n            <TodoList todos={todos} toggleTask={toggleTask} deleteTask={deleteTask}></TodoList>\n        </ul>\n    )\n}\n\nconst TodoList  = ({todos, toggleTask, deleteTask}) => {\n    const todoList = todos.map(todo => {\n        return <TodoItem completeFlag={todo.completeFlag} todoId={todo.todoId} content={todo.content} key={todo.todoId} toggleTask={toggleTask} deleteTask={deleteTask}></TodoItem>\n    })\n\n    return todoList;\n}\n\nconst TodoItem = ({completeFlag, todoId, content, toggleTask, deleteTask}) => {\n    return(\n        <li className={[completeFlag === true? \"todo_complete\" : \"todo_progress\", \"todoItem\"].join(\" \")} key={todoId}>\n            <span className=\"todo_content\" onClick={toggleTask} data-selected={todoId}>{content}</span>\n            <span className=\"todo_delete\"><img src=\"/img/delete.png\" alt=\"delete\" onClick={deleteTask} data-selected={todoId}/></span> \n        </li>\n    )\n}\nexport default TodoSection;","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nconst TodoFooter = () => {\n    return (\n        <div className=\"todo_footer\">hello</div>\n    )\n}\n\nexport default TodoFooter;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoHeader from './TodoHeader';\nimport TodoSection from './TodoSection';\nimport TodoFooter from './TodoFooter';\n\nclass App extends Component {\n  state = {\n    input : \"\",\n    lastTodoId : 1,\n    todos : [\n      {\n        todoId : 1,\n        content : \"hello world\",\n        completeFlag : false\n      }\n    ]\n  }\n\n  addTodo = () => {\n    const {input, todos, lastTodoId} = this.state;\n\n    this.setState({\n      input : \"\",\n      lastTodoId : lastTodoId + 1,\n      todos : todos.concat({\n        todoId : lastTodoId + 1,\n        content : input,\n        completeFlag : false\n      })\n    });\n  }\n\n  onChange = (e) => {\n    this.setState({\n      input : e.target.value\n    });\n  }  \n\n  keyEvent = (e) => {\n    if(e.key === \"Enter\") {\n      this.addTodo();\n    }\n  }\n\n  toggleTask = (event) => {\n    const {selected} = event.target.dataset;\n    const {todos} = this.state;\n    const todoList = todos.map(todo => {\n      return todo.todoId === Number(selected) ? {...todo, completeFlag:!todo.completeFlag} : {...todo}\n    });\n\n    this.setState({\n      todos : todoList\n    });\n  }\n\n  deleteTask = (event) => {\n    const {todos} = this.state;\n    const {selected} = event.target.dataset;\n    this.setState ({\n      todos : todos.filter(todo => todo.todoId !== Number(selected))\n    });\n  }\n\n  render() {\n    const {input, todos} = this.state;\n    const {addTodo, onChange, keyEvent, toggleTask, deleteTask} = this;\n\n    return (\n      <div className=\"todo_main\">\n        <div><h1>To Do List</h1></div>\n        <TodoHeader todos={todos} addTodo={addTodo} change={onChange} input={input} keyPress={keyEvent}></TodoHeader>\n        <div className=\"todo_div\">\n          <TodoSection todos={todos} toggleTask={toggleTask} deleteTask={deleteTask}></TodoSection>\n        </div>\n        <TodoFooter todos={todos}></TodoFooter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}